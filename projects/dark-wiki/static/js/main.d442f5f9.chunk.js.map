{"version":3,"sources":["API/Results.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["query","names","summaries","links","map","name","index","join","proxy","App","props","state","value","handleChange","bind","handleSubmit","event","this","setState","target","listAPI","fetch","then","response","json","Results","data","ReactDOM","render","dangerouslySetInnerHTML","__html","document","getElementById","api","jsonObject","parse","text","preventDefault","className","onSubmit","type","onChange","id","React","Component","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yRAAe,qCAAEA,EAAF,KAASC,EAAT,KAAgBC,EAAhB,KAA2BC,EAA3B,4CACQH,EADR,kDAGTC,EACCG,KACC,SAACC,EAAMC,GAAP,0EAEYH,EAAMG,GAFlB,8CAGUD,EAHV,+CAKOH,EAAUI,GALjB,kCASDC,KAAK,IAdG,gBCOTC,G,MAAQ,wCAsFCC,E,YAnFb,WAAYC,GAAY,IAAD,8BACrB,4CAAMA,KAGDC,MAAQ,CAACC,MAAO,IAErB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAPC,E,0EAeVE,GACXC,KAAKC,SAAS,CAACN,MAAOI,EAAMG,OAAOP,QACnC,IAAMQ,EAAO,UAAMZ,EAAN,gFAAmFQ,EAAMG,OAAOP,OAC7GS,MAAMD,GACHE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,KAAKG,GACLH,MAAK,SAAAI,GACJC,IAASC,OACP,yBAAKC,wBAAyB,CAAEC,OAAQJ,KACxCK,SAASC,eAAe,uB,mCAOnBhB,GACX,IAAMiB,EAAG,UAAMzB,EAAN,+FAAkGS,KAAKN,MAAMC,OACxHS,MAAMY,GACHX,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAY,GACJ,GAAKA,GAAeA,EAAWC,MAA/B,CAOA,IAAIT,EAAOQ,EAAWC,MAAMC,KAAK,KACjCT,IAASC,OACP,yBAAKC,wBAAyB,CAAEC,OAAQJ,KACxCK,SAASC,eAAe,cATxBL,IAASC,OACP,yBAAKC,wBAAyB,CAAEC,OAAQ,kDACxCC,SAASC,eAAe,iBAU9BhB,EAAMqB,mB,+BAIN,OACE,yBAAKC,UAAU,OAEb,kDAGA,4BAAQA,UAAU,cAElB,yBAAKA,UAAU,cACb,0BAAMC,SAAUtB,KAAKF,cAArB,YAEI,2BAAOyB,KAAK,OAAO5B,MAAOK,KAAKN,MAAMC,MAAO6B,SAAUxB,KAAKJ,eAC3D,2BAAO2B,KAAK,SAAS5B,MAAM,YAE/B,yBAAK8B,GAAG,gBAGV,yBAAKA,GAAG,uB,GA1EEC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNtB,IAASC,OAAO,kBAAC,EAAD,MAASG,SAASC,eAAe,SDmI3C,kBAAmBkB,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.d442f5f9.chunk.js","sourcesContent":["export default ([query, names, summaries, links]) => `\r\n  <h2>Searching for \"${query}\"</h2>\r\n  <ul class=\"list-group\">\r\n    ${names\r\n      .map(\r\n        (name, index) => `\r\n        <li class=\"list-group-item\">\r\n          <a href=${links[index]} target=\"_blank\">\r\n            <h4>${name}</h4>\r\n          </a>\r\n          <p>${summaries[index]}</p>\r\n        </li>\r\n      `\r\n      )\r\n      .join('')}\r\n  </ul>\r\n`;","import Results from \"./API/Results.js\"\r\nimport React from 'react';\r\nimport './App.css';\r\nimport ReactDOM from 'react-dom'\r\n\r\n\r\n\r\nconst proxy = \"https://cors-anywhere.herokuapp.com/\";\r\nclass App extends React.Component <{}, { value: string }> {\r\n  \r\n  constructor(props:any) {\r\n    super(props);\r\n    \r\n\r\n    this.state = {value: ''};\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    // this.handleLinkClick = this.handleLinkClick.bind(this);\r\n    // this.changeListLinks = this.changeListLinks.bind(this);\r\n    // this.findSubstring = this.findSubstring.bind(this);\r\n    // this.findSearchWord = this.findSearchWord.bind(this);\r\n  }\r\n\r\n\r\n  handleChange(event:any) {\r\n    this.setState({value: event.target.value});\r\n    const listAPI = `${proxy}https://en.wikipedia.org/w/api.php?origin=*&action=opensearch&search=${event.target.value}`\r\n    fetch(listAPI)\r\n      .then(response => response.json())\r\n      .then(Results)\r\n      .then(data => {\r\n        ReactDOM.render(\r\n          <div dangerouslySetInnerHTML={{ __html: data}} />,\r\n          document.getElementById(\"search_result\")\r\n        )\r\n        // this.changeListLinks();\r\n      })\r\n  }\r\n\r\n\r\n  handleSubmit(event:any) {\r\n    const api = `${proxy}http://en.wikipedia.org/w/api.php?action=parse&format=json&section=0&prop=text&page=${this.state.value}`;\r\n  fetch(api)\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .then(jsonObject => {\r\n      if (!jsonObject || !jsonObject.parse){\r\n        ReactDOM.render(\r\n          <div dangerouslySetInnerHTML={{ __html: \"<h5>There is no result from your search</h5>\"}} />,\r\n          document.getElementById(\"no_result\")\r\n        );\r\n        return;\r\n      }\r\n      let data = jsonObject.parse.text[\"*\"];\r\n      ReactDOM.render(\r\n        <div dangerouslySetInnerHTML={{ __html: data}} />,\r\n        document.getElementById(\"root\")\r\n      );\r\n    })\r\n    event.preventDefault();\r\n  }\r\n\r\n  public render(){\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <p>\r\n          DarkWiki by cnohall\r\n        </p>\r\n        <header className=\"App-header\">\r\n\r\n        <div className=\"form-style\">\r\n          <form onSubmit={this.handleSubmit}>\r\n              WikiPage:\r\n              <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n              <input type=\"submit\" value=\"Submit\" />\r\n          </form>\r\n          <div id=\"no_result\"></div>\r\n        </div>\r\n        </header>\r\n        <div id=\"search_result\"></div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // handleLinkClick(searchWord:string) {\r\n  //   console.log(searchWord);\r\n  //   const api = `${proxy}http://en.wikipedia.org/w/api.php?action=parse&format=json&section=0&prop=text&page=${searchWord}`;\r\n  //   fetch(api)\r\n  //   .then(response => {\r\n  //     return response.json();\r\n  //   })\r\n  //   .then(jsonObject => {\r\n  //     let data = jsonObject.parse.text[\"*\"];\r\n  //     ReactDOM.render(\r\n  //       <div dangerouslySetInnerHTML={{ __html: data}} />,\r\n  //       document.getElementById(\"root\")\r\n  //     );\r\n  //   })\r\n  // }\r\n\r\n  // changeListLinks (){\r\n  //   const that = this;\r\n  //   const lists = document.getElementsByClassName(\"list-group-item\");\r\n  //   for (let i = 0; i< lists.length; i++){\r\n  //       const innerHTML = lists[i].innerHTML;\r\n  //       const originalSubstring = that.findSubstring(innerHTML)\r\n  //       const searchWord = that.findSearchWord(originalSubstring)\r\n  //       const newSubstring = \"\";\r\n  //       const newInnerHTML = innerHTML.replace(originalSubstring, newSubstring);\r\n  //       lists[i].innerHTML = newInnerHTML;\r\n  //   }\r\n  //   return lists;\r\n  // } \r\n  \r\n  // findSubstring (innerHTML: string) {\r\n  //   const substring = innerHTML.substring(\r\n  //       innerHTML.indexOf('<'), \r\n  //       innerHTML.indexOf('>') +1\r\n  //   );\r\n  //   return substring\r\n  // }\r\n  \r\n  // findSearchWord (innerHTML: string) {\r\n  //   let substring = innerHTML.substring(\r\n  //       innerHTML.indexOf('wiki/') + 5, \r\n  //       innerHTML.indexOf('\" ')\r\n  //   );\r\n  //   return substring\r\n  // }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}